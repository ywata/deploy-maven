#!/usr/bin/env perl

@Bins = ("/bin/", "/usr/bin/");
$TAR = "tar";
$SVN = "svn";
$RM  = "/bin/rm";
$CURL = "curl";
$INSTALL = "install";

$BINDIR = "$ENV{HOME}/bin_";
$JAVA_HOME = "java_home";
$MAVEN_VER = "3.3.3";

$BUILD_VERSION_FILE = ".build_version";

$CHROOT = "chroot";

$TAR = &findFile($TAR, @Bins);
$SVN = &findFile($SVN, @Bins);
$CURL = &findFile($CURL, @Bins);
$INSTALL = &findFile($INSTALL, @Bins);

$REMOTE = "remotehost:/home/users/";
    
$build_started = `date "+%Y%m%d-%H%M"`;
chomp($build_started);

    
chomp($cwd = `pwd`); # /bin/pwd

# main function is command dispatcher
&dispatch_(@ARGV);

sub dispatch_{
    my(@argv) = @ARGV;
    my($command) = shift @argv; # 
    my($r);
    
    print "ARGV:@ARGV \n";
    print "argv:@argv \n";
    
    if($ARGV[0] eq "setup"){
	&do_setup_(@argv);
    }elsif($ARGV[0] eq "fetch"){
	# XXX 
	&fetch("http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz", 
	       "Cookie: oraclelicense=accept-securebackup-cookie");
	&fetch("http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz")
    }elsif(($ARGV[0] eq "checkout")){
	&writeVersion_($BUILD_VERSION_FILE, "", "");
	&do_checkout_("checkout", @argv);
    }elsif(($ARGV[0] eq "tag-checkout")){
	die "tag-checkout currently not supported.";
	&writeVersion_($BUILD_VERSION_FILE, "tag", $argv[0]);
	my($opt) = " checkout" . shift @argv;
	&do_checkout_($opt, @argv);
    }elsif(($ARGV[0] eq "rev-checkout")){
	&writeVersion_($BUILD_VERSION_FILE, "rev", $argv[0]);
	my($opt) = "checkout  -r " . shift @argv;
	&do_checkout_($opt, @argv);
    }elsif(($ARGV[0] eq "build")){
	my($t, $v) = &readVersion_($BUILD_VERSION_FILE);
	&do_build_($t, $v, @argv);
    }elsif(($ARGV[0] eq "deploy")){
	my($t, $v) = &readVersion_($BUILD_VERSION_FILE);
	&do_deploy_($t, $v, @argv);
    }elsif(($ARGV[0] eq "get-license")){
	&do_get_license_(@argv);
    }elsif(($ARGV[0] eq "depend")){
	
    }elsif($ARGV[0] eq "purge"){
	&do_purge_checkout_(@argv);
    }else{
	&usage_();
    }
}


sub do_setup_{
    my($jdk, $maven) = @_;
    if(! -d $BINDIR){
	mkdir $BINDIR or die "$BINDIR creation failed";
    }
    
    
    my $j = &untar_($BINDIR, $jdk);
    my $m = &untar_($BINDIR, $maven);

    
    my($mvn) =<< "END_OF_MVN";
#!/bin/sh

export JAVA_HOME=$BINDIR/$j
args=\$*

for opt in \$args; do
  case "\$opt" in
    "--show-java-home") echo "/Users/ywata/bin_/$d"; exit 0;;
    "--show-mvn") echo "depgen.pl" ; exit 0;;
  esac
done

$BINDIR/$m/bin/mvn \$*
END_OF_MVN
    
    &create_script_($BINDIR, "mvn", $mvn);
}

sub do_checkout_{
    my($opt, @argv) = @_;
    `$SVN $opt @argv`;
    if($?){
	
    }
}

sub do_deploy_{
    my($tag, $ver, $file, $step_user, $step_host, $target_user, @hosts) = @_;
    my(@path) = split /\//, $file;

    if(-f $file ){
	&run_("scp $file $step_user\@$step_host:");
    }else{
	die "$file not found.";
    }
    &ssh_("rm -rf usr", "", $step_user, $step_host);
    &ssh_("tar xvzf $path[-1]", "", $step_user, $step_host);
    foreach my $h (@hosts){
	&ssh_("usr/local/prod/bin/deploy_one.sh $target_user $h", "-t", $step_user, $step_host);
    }
}

sub do_build_{
    my($tag, $ver, @dirs) = @_; 
    print STDERR "do_build_:@dirs\n";

#    my($show_info) = `mvn --show-info`;
    chomp($show_info);

    $? = 0; # XXX
    if($?){
	die "mvn --show-info failed. This means we are not using mvn wrapper generated by $0 setup.";
    }
    
    if($0 =~ m|$show_info|){
    }else{
	die "Non mvn wrapper is used as psuedo mvn.";
    }

    my %deps;
    foreach my $d (@dirs){
	chdir $d || die "cd $d failed";
	&run_mvn("clean dependency:copy-dependencies package");
	my @dp = &get_dependencies($d);
	if(!defined($deps{$d})){
	    $deps{$d} = \@dp;
	}else{
	    die "$d is already defined";
	}
	chdir $cwd || die "cd $cwd failed";
    }

    my($lib, $bin, $conf, $archive, $prod);
    my $prod = "usr/local/prod";

    if($ver eq ""){
	$lib = "$prod/lib";
	$bin = "$prod/bin";
	$conf = "$prod/conf";
	$archive = "archive.tar.gz";
    }else{
	$lib = "$prod/lib.$ver";
	$bin = "$prod/bin";
	$conf = "$prod/conf";
	$archive = "archive.$ver.tar.gz";
    }
    &run_("$RM -rf $CHROOT");
    &mkdir_($CHROOT);
    &install_dir("$CHROOT/$bin", "$CHROOT/$conf", "$CHROOT/$lib");
    
    &create_deploy_self_($tag, $ver, $prod, $lib, $bin, $conf, $archive, "$CHROOT/usr/local/prod");
    &create_deploy_one_($tag, $ver, $prod, $lib, $bin, $conf, $archive, "$CHROOT/usr/local/prod");    
    &create_archive($tag, $ver, $prod, $lib, $bin, $conf, $archive, "$CHROOT/usr/local/prod", \%deps, @dirs);
}



# host: chroot/archive.???.tar.gz 
# step server: $HOME/archive.???.tar.gz
#                   usr/local/prod/bin
#                   usr/local/prod/conf
#                   usr/local/prod/lib.???
# target server : $HOME/archive.???.tar.gz
#                      usr/local/prod/bin
#                      usr/local/prod/conf
#                      usr/local/prod/lib.???
#                  /usr/local/prod/bin
#                  /usr/local/prod/conf
#                  /usr/local/prod/lib.???
#                  /usr/local/prod/lib

sub create_deploy_self_{
    my($tag, $ver, $prod, $lib, $bin, $conf, $archive, @dirs)  = @_;
    my($lib_) = (split /\//, $lib)[-1];
    my($sh) = "deploy_self.sh";

    open(S, ">$CHROOT/$bin/$sh") or die "cannot create $CHROOT/$bin/$sh $cwd";
    print S << "END_OF_DEPLOY";
#!/bin/sh

# The script runs on target server.

top=test
mkdir \$top
cd \$top
sudo install -d $lib
sudo install -d $bin
sudo install -d $conf
sudo tar xvzf \$HOME/$archive
if [ -f $prod/lib ]; then
  sudo rm -f $prod/lib
fi

sudo ln -s $lib $prod/lib

END_OF_DEPLOY
    close(S);
    chmod 0755, "$CHROOT/$bin/$sh" or die "chmod $CHROOT/$bin/$sh failed. $cwd";
}

sub create_deploy_one_{
    my($tag, $ver, $prod, $lib, $bin, $conf, $archive, @dirs)  = @_;
    my($lib_) = (split /\//, $lib)[-1];
    my($sh) = "deploy_one.sh";
    # This script runs on step server.
    open(S, ">$CHROOT/$bin/$sh") or die "cannot create $CHROOT/$bin/$sh $cwd";
    print S << "END_OF_DEPLOY";
#!/bin/sh

target_user=\$1
target_host=\$2

scp $archive \$target_user\@\$target_host:$archive
ssh \$target_user\@\$target_host tar xvzf $archive
ssh -t \$target_user\@\$target_host $bin/deploy_self.sh 
END_OF_DEPLOY
    close(S);
    chmod 0755, "$CHROOT/$bin/$sh" or die "chmod $sh failed";
}

sub create_archive{
    my($tag, $ver, $prod, $lib, $bin, $conf, $archive, $prod, $deps, @dirs)  = @_;
    my %deps = %$deps;

    foreach my $d (@dirs){
	print "---> $deps{$d} @$deps{$d}\n";
	my %artifacts = &pack_conv($d, @$deps{$d});
	
	
	open(FIND, "find $d |") or die "find $d failed";
	while(<FIND>){
	    my($where, $dep, $name, $target);
	    chomp;
	    if(m|(.+)/target/.+jar-with-dependencies\.jar|){
		next;
	    }elsif(m|(.+)/target/dependency/([^/]+\.jar)|){
		($where, $dep, $name, $target) = ($1, 1, $2, $_);
	    }elsif(m|(.+)/target/([^/]+\.jar)|){
		($where, $dep, $name, $target) = ($1, 0, $2, $_);
	    }else{
#		print "Warning $_\n";
		next;
	    }
	    my($w) = "$CHROOT/$lib/$where";

	    $target =~ m|([^/]+)$|;
	    my $base = $1;
	    if($artifacts{$base} eq "test"){
		print "$target is used for test. Ignored. $base $artifacts{$base}\n";
	    }else{
#		print "$target is OK $base $artifacts{$base}\n";
		if(! -d $w){
		    &install_dir($w);
		}
		&install_file($target, "$w/$name");
	    }
	}
	close(FIND);
    }
    &archive_($CHROOT, $archive);
}

sub pack_conv{
    my($d, @rest) = @_;
    my(%r);
    
    print "pack_conv\n";
    foreach my $s (@rest){
	print @rest;
	foreach my $l (@$s){
	    my($gId, $artId, $packType, $version, $scope) = split /:/, $l;
	    print "$scope\n";
	    my($target) = "$artId-$version.$packType";
	    $r{$target} = $scope;
	    print "$target -> $scope\n";
	}
    }
    return %r;
}

sub run_mvn{
    my($opt) = @_;
    my($mvn) = "mvn $opt 2>1 ";
    my $res = `$mvn`;
#    my @res = split(/\n/, $res);

    if($?){
	die "$res\n Sorry $mvn failed.";
    }
}

sub archive_{
    my($chroot, $archive)  = @_;
    chdir $chroot or die "cd $chroot failed";
    &run_("$TAR cvzf $archive usr");
    
    chdir $cwd or die "cd $cwd";
}

sub install_file{
    my($file, $dir, @opt) = @_;
    &install_($file, $dir, @opt);
}

sub install_{
    my($file, $dir, @opt) = @_;
    &run_("$INSTALL @opt $file $dir");
}

sub install_dir{
    my(@dir) = @_;
    foreach my $d (@dir){
	&run_("$INSTALL -d $d");
    }
}

sub get_dependencies{
    my(@deps);
    open(F, "mvn dependency:list |") or die "$mvn failed";
    if(! -f "pom.xml"){
	die "No pom.xml found.";
    }
    while(<F>){
	last if(m|^\[INFO\] The following files have been resolved:|);
    }
    while(<F>){
	if(m|\INFO\] +((.+):(.+):(.+):(.+):(.+))|){
#	    print "### $_";
	    push @deps, $1;
	}else{
	    last;
	}
    }
    close(F);

    return @deps;
}

sub ssh_{
    my($command, $opt, $user,  @hosts) = @_;
    print STDERR "ssh $user $command --> @hosts\n";
    foreach my $h (@hosts){
	&ssh__($user, $h, $command, $opt);
    }
}

sub ssh__{
    my($user, $host, $command, @opt) = @_;
    #    print "ssh $host $command @opt\n";
    print STDERR "ssh $user\@$host $command @opt\n";
    open(SSH, "ssh @opt $user\@$host $command |") or die "ssh $host $command failed";
    while(<SSH>){
	print;
    }
    close(SSH);
}

sub run_{
    my($command) = @_;
    `$command`;
    if($?){
	die "$command failed";
    }
}

sub untar_{
    my($dir, $tgz) = @_;

    chdir $dir || die "cd $dir failed";
    open(TAR, "$TAR xvzf $cwd/$tgz 2>&1 |") or die $!;
    my $top;
    while(<TAR>){
	if(m/^(x )?([^\/]+)/){
	    $top = $2;
	}
    }
    close(TAR);

    if($top ne ""){
	chdir $cwd || die "cd $dir failed";
	return $top;
    }else{
	die "no contents found in $tgz";
    }
    
    
}

sub get_tag{
    my($a) = @_;
    my($tag, $ver) = split(/:/, $a);

    if($tag eq ""){

	return ("time", $build_started);
    }else{
	if($tag eq "tag" and $ver ne ""){
	    return ($tag, $ver);
	}elsif($tag eq "rev" and $ver =~ m|[1-9][0-9]*|){
	    return ($tag, $ver);
	}elsif($tag eq "time" and $ver ne ""){
	    return ($tag, $ver);
	}else{
	    return ("time", $build_started);
	}
    }
}



sub create_script_{
    my($d, $file, $script) = @_;
    &mkdir_($d);
    my($f) = "$d/$file";
    open(SCRIPT, ">$f") or die "cannot create $f";
    print SCRIPT $script;
    close(SCRIPT);

    my($mode) = 0755;
    chmod $mode, $f || die "chmod $f failed";
}

sub mkdir_{
    my($d) = @_;
    if( ! -d $d){
	mkdir($d) or die "Cannot mkdir $d";
    }
}

sub findFile{
    my($file, @dirs) = @_;
    foreach my $d (@dirs){
	my($f) = "$d/$file";
	if( -f $f){
	    return $f
	}
    }
    die "$file not found in @dirs";
}

sub fetch{
    my($url, $cookie) = @_;
    my(@url) = split /\//, $url;
    my($curl);
    my($file) = $url[-1];

    if($cookie eq ""){
	$curl = "$CURL -j -L ";
    }else{
	$curl = "$CURL -j -k -L -H \"$cookie\" ";
    }
    print STDERR "$url\n";
    $curl .= "$url > $file";
    if( ! -f $file){
	`$curl`;
	if($?){
	    die "$curl failed";
	}
    }
}

sub readVersion_{
    my($f) = @_;
    open(F, "$f") or &get_tag(":");
    my($l) = <F>;
    close(F);
    my($R, $V) = &get_tag("$l");
    return($R, $V);
}
sub writeVersion_{
    my($f, $r, $v) = @_;

    my($R, $V) = &get_tag("$r:$v");
    open(F, ">$f") or die "cannot create $f";
    print F "$R:$V";
    close(F);
}

sub usage_{
    my($prog) = @_;
    print STDERR <<"END_OF_USAGE";
usage:$prog setup jdk-id            # setup mvn & JAVA_HOME
      $prog checkout url            # checkout latest source from url
      $prog tag-checkout tag url    # checkout latest source from url with tag
      $prog rev-checkout rev url    # checkout latest source from url with rev
      $prog build [dirs]            # build and archive files to transfer
      $prog deploy archive-file staging-user staging-host target-host-user target-hosts 

      $prog get-license dir [dirs]
END_OF_USAGE

    exit 1;
}
__END__


